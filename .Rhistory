summary(train_data)
#Import train dataset
train_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/train.csv", header = TRUE)
#Remove first column
train_data<-train_data[-1]
#Import test dataset
test_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/test.csv")
test_data<-train_data[-1]
#Import train dataset
train_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/train.csv", header = TRUE)
#Import test dataset
test_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/test.csv", header= TRUE)
#Remove first column
train_data<-train_data[-1]
test_data<-test_data[-1]
#Building our wn column to differentiate between the values train-true test - false
train_data$IsTrainSet <- TRUE
test_data$IsTrainSet <- FALSE
tail(train_data$IsTrainSet)
tail(test_data$IsTrainSet)
ncol(train_data)
ncol(test_data)
test_data$Survived <- 'n/a'
#We will join both data because running commands in 2 datasets separately.
full_data <- rbind(train_data, test_data)
#See table names
names(full_data)
summary(full_data)
summary(full_data)
# Alive -Dead
full_data$Survived[full_data$Survived==0]<- "Din't Survive"
full_data$Survived[full_data$Survived==1]<- "Survived"
table(full_data$Embarked)
table(full_data$Embarked)
full_data[full_data$Embarked='')
table(is.na(full_data$Age)) #177 missing values
#Replacing missing value age with median value
full_data$Age[is.na(full_data$Age)] <- median(full_data$Age, na.rm = TRUE)
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
counts <- table(full_data$Survived, full_data$Sex)
barplot(counts, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
library(scales)
ggplot(full_data,
aes(x = train_data$Sex, fill = full_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
#The percentage of women who survived is more around 74% as compared to male which is only around 19%
install.packages("ggplot2")
library(ggplot2)
library(scales)
ggplot(full_data,
aes(x = full_data$Pclass, fill = full_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
###########################
##  MODEL BUILDING ###
#########################
install.packages("random forest")
library(randomForest)
set.seed(100)
random_f <- randomForest(factor(full_data$Survived)~Pclass + Sex + Age + SibSp + Parch + Fare, data=full_data,ntree=401)
importance(random_f)
print(random_f)
full_data[full_data$Embarked=""]
full_data[full_data$Embarked=""]
full_data[full_data$Embarked='']
full_data[full_data$Embarked='',"Embarked"]
full_data[full_data$Embarked='',Embarked]
full_data[full_data$Embarked ='',"Embarked"]
full_data[full_data$Embarked =='',"Embarked"]
full_data[full_data$Embarked == '',"Embarked"]
full_data[full_data$Embarked == '',"Embarked"] <- S
full_data[full_data$Embarked == '',"Embarked"] <- 'S'
table(full_data$Embarked)
table(is.na(full_data$Age)) #177 missing values
table(is.na(full_data$Age)) #177 missing values
table(is.na(full_data$Age)) #177 missing values
#Check missing values for each variable
table(is.na(full_data$Survived)) #No missing values for survived,names,pclass(all categorical values)
table(is.na(full_data$Sex)) # No missing
table(is.na(full_data$SibSp)) #No Missing
table(is.na(full_data$Parch)) #No Missing
table(is.na(full_data$Ticket)) #No Missing
table(is.na(full_data$Fare)) #No Missing
#Replacing
full_data$Fare[is.na(full_data$Fare)] <- median(full_data$Fare, na.rm = TRUE)
table(is.na(full_data$Fare)) #No Missing
table(is.na(full_data$Cabin)) #No Missing
table(is.na(full_data$Embarked)) #No Missing
table(full_data$Embarked)
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
counts <- table(full_data$Survived, full_data$Sex)
#test and train back to separate after cleaning
train_data<-full_data[full_data$IsTrainSet== TRUE,]
train_data<-full_data[full_data$IsTrainSet== FALSE,]
#Categorical casting
full_data
#Categorical casting
str(full_data)
full_data$Pclass<-as.factor(full_data$Pclass)
full_data$Embarked<-as.factor(full_data$Embarked)
full_data$Sex<-as.factor(full_data$Sex)
#test and train back to separate after cleaning
train_data<-full_data[full_data$IsTrainSet== TRUE,]
train_data<-full_data[full_data$IsTrainSet== FALSE,]
full_data$Survived<-as.factor(full_data$Survived)
library(randomForest)
library(tidyverse)
#Import train dataset
train_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/train.csv", header = TRUE)
#Import test dataset
test_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/test.csv", header= TRUE)
#Building our own column to differentiate between the values train-true test - false
train_data$IsTrainSet <- TRUE
test_data$IsTrainSet <- FALSE
tail(train_data$IsTrainSet)
tail(test_data$IsTrainSet)
ncol(train_data)
ncol(test_data)
test_data$Survived <- 'n/a'
#We will join both data because running commands in 2 datasets separately.
full_data <- rbind(train_data, test_data)
#See table names
names(full_data)
summary(full_data)
# Alive -Dead
full_data$Survived[full_data$Survived==0]<- "Din't Survive"
full_data$Survived[full_data$Survived==1]<- "Survived"
#Check missing values for each variable
table(is.na(full_data$Survived)) #No missing values for survived,names,pclass(all categorical values)
table(is.na(full_data$Sex)) # No missing
table(is.na(full_data$SibSp)) #No Missing
table(is.na(full_data$Parch)) #No Missing
table(is.na(full_data$Ticket)) #No Missing
table(is.na(full_data$Fare)) #No Missing
#Replacing
full_data$Fare[is.na(full_data$Fare)] <- median(full_data$Fare, na.rm = TRUE)
table(is.na(full_data$Cabin)) #No Missing
table(is.na(full_data$Embarked)) #No Missing
table(full_data$Embarked)
full_data[full_data$Embarked == '',"Embarked"] <- 'S'
table(full_data$Embarked)
table(is.na(full_data$Age)) #177 missing values
#Replacing missing value age with median value
full_data$Age[is.na(full_data$Age)] <- median(full_data$Age, na.rm = TRUE)
#Categorical casting
str(full_data)
table(is.na(full_data$Age))
full_data$Pclass<-as.factor(full_data$Pclass)
full_data$Embarked<-as.factor(full_data$Embarked)
full_data$Sex<-as.factor(full_data$Sex)
full_data$Survived<-as.factor(full_data$Survived)
#test and train back to separate after cleaning
train_data<-full_data[full_data$IsTrainSet== TRUE,]
train_data<-full_data[full_data$IsTrainSet== FALSE,]
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
counts <- table(full_data$Survived, full_data$Sex)
barplot(counts, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
ggplot(full_data,
aes(x = train_data$Sex, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
counts <- table(train_data$Survived, train_data$Sex)
barplot(counts, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
count <- table(train_data$Survived, train_data$Sex)
barplot(count, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
#test and train back to separate after cleaning
train_data<-full_data[full_data$IsTrainSet== TRUE,]
test_data <-full_data[full_data$IsTrainSet== FALSE,]
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
count <- table(train_data$Survived, train_data$Sex)
barplot(count, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
count <- table(train_data$Survived, train_data$Sex)
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
counts <- table(train_data$Survived, train_data$Sex)
barplot(counts, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
counts <- table(train_data$Survived, train_data$Sex)
barplot(counts, main="Distribution by Survival based on Sex",
xlab="Survived", col=c("Red","Green"),
legend = rownames(counts))
library(scales)
ggplot(train_data,
aes(x = train_data$Sex, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
library(ggplot2)
ggplot(full_data,
aes(x = full_data$Pclass, fill = full_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
install.packages("random forest")
library(randomForest)
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived.equation)
Survived_formula <- as.formula(survived_equation)
rf_model <- randomForest(factor(full_data$Survived)~Pclass + Sex + Age + SibSp + Parch + Fare, data=full_data,ntree=401)
features_equation<-"Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(rf_model, newdata = test_data)
PassengerId <- test_data$PassengerId
Survived
rf_model <- randomForest(factor(survuved_formula)~Pclass + Sex + Age + SibSp + Parch + Fare, data=full_data,ntree=401)
rf_model <- randomForest(factor(survived_formula)~Pclass + Sex + Age + SibSp + Parch + Fare, data=full_data,ntree=401)
rf_model <- randomForest(factor(Survived_formula)~Pclass + Sex + Age + SibSp + Parch + Fare, data=full_data,ntree=401)
library(tidyverse)
#Import train dataset
train_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/train.csv", header = TRUE)
#Import test dataset
test_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/test.csv", header= TRUE)
#View table
view(train_data)
view(test_data)
#Building our own column to differentiate between the values train-true test - false
train_data$IsTrainSet <- TRUE
test_data$IsTrainSet <- FALSE
tail(train_data$IsTrainSet)
tail(test_data$IsTrainSet)
ncol(train_data)
ncol(test_data)
test_data$Survived <- 'n/a'
#We will join both data because running commands in 2 datasets separately.
full_data <- rbind(train_data, test_data)
#See table names
names(full_data)
summary(full_data)
# Alive -Dead
full_data$Survived[full_data$Survived==0]<- "Din't Survive"
full_data$Survived[full_data$Survived==1]<- "Survived"
#Check missing values for each variable
table(is.na(full_data$Survived)) #No missing values for survived,names,pclass(all categorical values)
table(is.na(full_data$Sex)) # No missing
table(is.na(full_data$SibSp)) #No Missing
table(is.na(full_data$Parch)) #No Missing
table(is.na(full_data$Ticket)) #No Missing
table(is.na(full_data$Fare)) #No Missing
#Replacing
full_data$Fare[is.na(full_data$Fare)] <- median(full_data$Fare, na.rm = TRUE)
table(is.na(full_data$Cabin)) #No Missing
table(is.na(full_data$Embarked)) #No Missing
table(full_data$Embarked)
full_data[full_data$Embarked == '',"Embarked"] <- 'S'
table(full_data$Embarked)
table(is.na(full_data$Age)) #177 missing values
#Replacing missing value age with median value
full_data$Age[is.na(full_data$Age)] <- median(full_data$Age, na.rm = TRUE)
table(is.na(full_data$Age))
#Categorical casting
str(full_data)
full_data$Pclass<-as.factor(full_data$Pclass)
full_data$Embarked<-as.factor(full_data$Embarked)
full_data$Sex<-as.factor(full_data$Sex)
full_data$Survived<-as.factor(full_data$Survived)
#test and train back to separate after cleaning
train_data<-full_data[full_data$IsTrainSet== TRUE,]
test_data <-full_data[full_data$IsTrainSet== FALSE,]
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
#Titanic survival based on sex
library(scales)
ggplot(train_data,
aes(x = train_data$Sex, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Titanic Survival based on Sex") +
theme_minimal()
#The percentage of women who survived is more around 74% as compared to male which is only around 19%
install.packages("ggplot2")
library(ggplot2)
library(scales)
ggplot(full_data,
aes(x = full_data$Pclass, fill = full_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
###########################
##  MODEL BUILDING ###
#########################
install.packages("ggplot2")
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived_equation)
rf_model <- randomForest(factor(Survived_formula)~Pclass + Sex + Age + SibSp + Parch + Fare, data=train_data,ntree=401)
rf_model <- randomForest(factor(Survived_formula, data = train_data,ntree=500, mtry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(factor=Survived_formula, data = train_data,ntree=500, mtry=3, nodesize=0.01*nrow(test_data))
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived_equation)
rf_model <- randomForest(factor=Survived_formula, data = train_data, ntree=500, mtry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(factor= Survived_formula, data = train_data, ntree=500, mtry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, mtry=3, nodesize=0.01*nrow(test_data))
install.packages("random forest")
library(randomForest)
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived_equation)
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, mtry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
library(randomForest)
install.packages("random forest")
library(randomForest)
library(random forest)
library("random forest")
library(random forest)
library(randomforest)
library(randomeForest)
library(randomForest)
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived_equation)
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
head(train_data)
features_equation<-"Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(rf_model, newdata = test_data)
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
library(tidyverse)
#Import train dataset
train_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/train.csv", header = TRUE)
#Import train dataset
train_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/train.csv", header = TRUE)
#Import test dataset
test_data <- read.csv("C:/Users/Owner/Desktop/Data Project/titanic/test.csv", header= TRUE)
#Structure
str(train_data)
str(test_data)
#Building our own column to differentiate between the values train-true test - false
train_data$IsTrainSet <- TRUE
test_data$IsTrainSet <- FALSE
tail(train_data$IsTrainSet)
tail(test_data$IsTrainSet)
ncol(train_data)
ncol(test_data)
test_data$Survived <- 'n/a'
#We will join both data because running commands in 2 datasets separately.
full_data <- rbind(train_data, test_data)
#See table names
names(full_data)
summary(full_data)
# Alive -Dead
full_data$Survived[full_data$Survived==0]<- "Din't Survive"
full_data$Survived[full_data$Survived==1]<- "Survived"
head(full_data)
# Alive -Dead
full_data$Survived[full_data$Survived=="Din't Survive"]<- 0
full_data$Survived[full_data$Survived=="Survived"]<- 1
head(full_data)
#Check missing values for each variable
table(is.na(full_data$Survived)) #No missing values for survived,names,pclass(all categorical values)
table(is.na(full_data$Sex)) # No missing
table(is.na(full_data$SibSp)) #No Missing
table(is.na(full_data$Parch)) #No Missing
table(is.na(full_data$Ticket)) #No Missing
table(is.na(full_data$Fare)) #No Missing
#Replacing
full_data$Fare[is.na(full_data$Fare)] <- median(full_data$Fare, na.rm = TRUE)
table(is.na(full_data$Cabin)) #No Missing
table(is.na(full_data$Embarked)) #No Missing
table(full_data$Embarked)
full_data[full_data$Embarked == '',"Embarked"] <- 'S'
table(full_data$Embarked)
table(is.na(full_data$Age)) #177 missing values
table(full_data$Embarked)
table(is.na(full_data$Age)) #177 missing values
#Replacing missing value age with median value
full_data$Age[is.na(full_data$Age)] <- median(full_data$Age, na.rm = TRUE)
table(is.na(full_data$Age))
#Categorical casting
str(full_data)
full_data$Pclass<-as.factor(full_data$Pclass)
full_data$Embarked<-as.factor(full_data$Embarked)
full_data$Sex<-as.factor(full_data$Sex)
full_data$Survived<-as.factor(full_data$Survived)
#test and train back to separate after cleaning
train_data<-full_data[full_data$IsTrainSet== TRUE,]
test_data <-full_data[full_data$IsTrainSet== FALSE,]
### BAR GRAPH ###
# Stacked Bar Plot with Colors and Legend
#Titanic survival based on sex
library(scales)
ggplot(train_data,
aes(x = train_data$Sex, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Titanic Survival based on Sex") +
theme_minimal()
library(ggplot2)
library(scales)
ggplot(full_data,
aes(x = full_data$Pclass, fill = full_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
ggplot(full_data,
aes(x = train_data$Pclass, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
ggplot(full_data,
aes(x = train_data$Pclass, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
ggplot(full_data,
aes(x = train_data$Pclass, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
ggplot(train_data,
aes(x = train_data$Pclass, fill = train_data$Survived)) +
geom_bar(position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
scale_fill_brewer(palette = "Set2") + labs(y = "Percent",
fill = "Drive Train", x = "Class", title = "Titanic Survival based on Pclass") +
theme_minimal()
install.packages("random forest")
library(randomForest)
head(train_data)
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived_equation)
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
rf_model <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
rfmodel <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
test_data$Survived <- NA
rfmodel <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
HEAD(test_data)
head(test_data)
survived_equation<-"Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived_formula <- as.formula(survived_equation)
library(randomForest)
rfmodel <- randomForest(formula= Survived_formula, data = train_data, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
new.traindata <- droplevels(train_data)
rfmodel <- randomForest(formula= Survived_formula, data = new.traindata, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
features_equation<-"Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(rf_model, newdata = test_data)
Survived <- predict(rfmodel, newdata = test_data)
head(train_data)
ncol(train_data)
ncol(test_data)
Survived <- predict(rfmodel, newdata = test_data)
rfmodel <- randomForest(formula= Survived_formula, data = new.traindata, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
new.testdata <- droplevels(test_data)
rfmodel <- randomForest(formula= Survived_formula, data = new.traindata, ntree=500, ntry=3, nodesize=0.01*nrow(test_data))
features_equation<-"Pclass + Sex + Age + SibSp + Parch + Fare + Embarked"
Survived <- predict(rfmodel, newdata = new.testdata)
Survived
PassengerId <- new.traindata$PassengerId
output_df <- as.data.frame(PassengerId)
output_df <- Survived
output_df
head(output_df)
str(output_df)
write.csv(output_df, file = "C:/Users/Owner/Desktop/Data Project/kaggle submission.csv")
write.csv(output_df, file = "C:/Users/Owner/Desktop/Data Project/kaggle submission.csv", row.names = FALSE)
PassengerId <- new.traindata$PassengerId
output_df <- as.data.frame(PassengerId)
output_df <- Survived
write.csv(output_df, file = "C:/Users/Owner/Desktop/Data Project/kaggle submission.csv", row.names = FALSE)
PassengerId <- train_data$PassengerId
output_df <- as.data.frame(PassengerId)
output_df <- Survived
write.csv(output_df, file = "C:/Users/Owner/Desktop/Data Project/kaggle submission.csv", row.names = FALSE)
PassengerId <- new.traindata$PassengerId
output_df <- as.data.frame(PassengerId)
output_df$Survived <- Survived
PassengerId <- new.traindata$PassengerId
output_df <- as.data.frame(PassengerId)
PassengerId <- train_data$PassengerId
output_df <- as.data.frame(PassengerId)
output_df$Survived <- Survived
PassengerId <- new.testdata$PassengerId
output_df <- as.data.frame(PassengerId)
output_df$Survived <- Survived
write.csv(output_df, file = "C:/Users/Owner/Desktop/Data Project/kaggle submission.csv", row.names = FALSE)
